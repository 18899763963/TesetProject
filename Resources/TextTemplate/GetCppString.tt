<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SmallManagerSpace.Resources" #>
/******************************************************************************

        Copyright (C), 2002-2010, Wuhan FiberHome Tech. Co., Ltd.

******************************************************************************
   文 件 名   : fhapp_otn_user_auto.cpp
   版 本 号   : 初稿
   作    者   : 用户1
   生成日期   : <#= DateTime.Now.ToString("yyyy") #>年<#= DateTime.Now.ToString("MM") #>月<#= DateTime.Now.ToString("dd") #>日
   最近修改   :
   功能描述   : 单盘初始化信息处理
   函数列表   :              
   修改历史   :
   日    期   : <#= DateTime.Now.ToString("yyyy") #>年<#= DateTime.Now.ToString("MM") #>月<#= DateTime.Now.ToString("dd") #>日
   作    者   : 用户1
   修改内容   : 创建文件
******************************************************************************/

#include "fhapp_otn_user_auto.h"


<# GetFunctionEntity(); #>

<#+ 
                    ///得到BoardNum数量
				    private string GetBoardNum()
					{
						var FirstList=ComData.customStruct.nodeList.FirstOrDefault();
					    StructItem firstItem= FirstList as StructItem;
						var sItem=	firstItem.parameterList.Where(x => (x as Parameter).name == "board_num").ToList();
						 Parameter Item=sItem.FirstOrDefault() as Parameter;
						return	Item.value;
					}
                    ///得到pointerName
                    private string GetPointerName(string input)
					{   
                        string substring="";
                        if(input.Contains("->"))
                        {
                            substring= input.Substring(0,input.IndexOf('-'));
                        }
                        return substring;
					}
                    
                    ///得到函数名称并填充函数内容
                    private void GetFunctionEntity()
                    {
                        if(ComData.showEntities.Count>=0)
                        {
                            foreach(ShowEntity i in ComData.showEntities)
                            {
                                GenerateFunctionAnnotation(i.argType,i.argName,i.funName);
                                this.WriteLine("{0} {1}({2} *{3})",i.retType,i.funName,i.argType,i.argName);
                                this.WriteLine("{");
                                this.WriteLine("\tif({0} != NULL)",i.argName);
                                GenerateTextToFunction(i.argType,i.argName+"->","");
                                this.WriteLine("\telse");
                                this.WriteLine("\t{");
                                this.WriteLine("\t\t return -1;");
                                this.WriteLine("\t}");
                                this.WriteLine("\treturn 0;");	
                                this.WriteLine("}");
                                this.WriteLine("\r\n\r\n");
                            }
                        }
                    }        
                    ///生成函数注释
                    private void GenerateFunctionAnnotation(string type,string pointer,string funcName)
                    {
                    
                        this.WriteLine("/******************************************************************************");
                        this.WriteLine("*函数名   :{0}",funcName);
                        this.WriteLine("*负责人   :");
                        this.WriteLine("*创建日期 :{0}",DateTime.Now.ToString("yyyyMMdd"));
                        this.WriteLine("*函数功能 :");
                        this.WriteLine("*输入参数 :无");
                        this.WriteLine("*输出参数 :{0}",pointer);
                        this.WriteLine("*返回值   :0 - 成功，-1 - 失败");
                        this.WriteLine("*调用关系 :");
                        this.WriteLine("*其它     :");
                        this.WriteLine("******************************************************************************/");
                                
                     }

                    ///生成字符串入口函数
	                private void GenerateTextToFunction(string type,string pointer,string indexName)
                    {
				
                        //分类指定type的数据
                        var StructList=ComData.customStruct.nodeList.Where(x => (x as StructItem).type == type).ToList(); 
               
                        //遍历其中的项目	  
                        this.WriteLine("\t{");
                        int i=0;
                        foreach(var StructItem in StructList)
                        {
                            TraversalStructItem(StructItem,pointer,false,0);
                            i++;
                        }
                        this.WriteLine("\t}");

                    }

					///将parameter struct对象分别放入不同队列
					private List<Dictionary<string,List<object>>> GroupSameObject(List<object> objList)
					{
						List<Dictionary<string,List<object>>> listDic=new List<Dictionary<string,List<object>>>();
						Dictionary<string,List<object>> parameDic=new Dictionary<string,List<object>>(){ };
						Dictionary<string,List<object>> structDic=new Dictionary<string,List<object>>(){ };
						
						foreach(object oI in objList)
						{
							if(oI is StructItem)
							{
								   //添加StructItem到字典
								  StructItem pItem=oI as StructItem;
									//如果初次添加
									if(!structDic.ContainsKey(pItem.name))
									{
										//List<object> objList=new List<object>();
										structDic[pItem.name]=new List<object>();
									}
								  structDic[pItem.name].Add(oI);
							}
							else if(oI is Parameter)
							{
									//添加Parameter到字典
								  Parameter sItem=oI as Parameter;
								   //如果初次添加
									if(!parameDic.ContainsKey(sItem.name))
									{
										//List<object> objList=new List<object>();
										parameDic[sItem.name]=new List<object>();
									}
								  parameDic[sItem.name].Add(oI);
							}
						}
								listDic.Add(parameDic);
								listDic.Add(structDic);								
								return listDic;
								
					}


                ///遍历得到树形结构字符串
				private void TraversalStructItem(object ObjItem,string Prefix,bool isArray,int indexValue)
				{		
						if(ObjItem==null) return ;
						if(ObjItem is StructItem)
						{	 
								StructItem sItem=ObjItem as StructItem;			
								//第一个队列放structDic，第二个队列放parameDic
							  List<Dictionary<string,List<object>>> gruopObj=GroupSameObject(sItem.parameterList);
							  Dictionary<string,List<object>> parameDic=gruopObj[0];
							  Dictionary<string,List<object>> structDic=gruopObj[1];							 
								//处理parameDic
							 foreach(string pName in parameDic.Keys)
							{	
								//如果根据数量只有一个
									List<object> paraList= parameDic[pName];															
									if(paraList.Count==1)
									{
                                        //如果数量只有一个,但是原来定义为数组类型
                                        Parameter m= paraList[0] as Parameter;
                                        if(m.index!="")	{TraversalStructItem(paraList[0], Prefix,true,0);}
                                        //如果不是数组(根据数量只有一个)
										else{TraversalStructItem(paraList[0], Prefix,false ,0);}
									}
								//如果数量多于一个，则一定是数组
									else if(paraList.Count>1)
									{
										for(int i=0;i<paraList.Count;i++)
										{
											TraversalStructItem(paraList[i], Prefix,true,i);
									    }
									}
							}
							//处理structDic
							 foreach(string sName in structDic.Keys)
							{	
								//如果数量只有一个
									List<object> strucList= structDic[sName];
									if(strucList.Count==1)
									{
                                        //如果数量只有一个,但是原来定义为数组类型
                                        StructItem m= strucList[0] as StructItem;
                                        
                                        if(m.index!="")	{
                                            string newPerfix=string.Format("{0}{1}[0]{2}",Prefix ,sName,".");
                                            TraversalStructItem(strucList[0], newPerfix,true ,0);
                                            }
                                        //如果不是数组(根据数量只有一个)
										else{
                                                string newPerfix=string.Format("{0}{1}{2}",Prefix ,sName,".");
                                                TraversalStructItem(strucList[0], newPerfix,false ,0);}			
									         }
								//如果数量多于一个，则一定是数组
									else if(strucList.Count>1)
									{
										for(int i=0;i<strucList.Count;i++)
										{
											string newPerfix=string.Format("{0}{1}[{2}].",Prefix ,sName,i);
											TraversalStructItem(strucList[i], newPerfix,true,i);
									    }
									}
							}
							
						}
						else if(ObjItem is Parameter)
						{
						    Parameter pItem=ObjItem as Parameter;
							if(!isArray)
                            {
                               //去除fpga_module这一项
                               if(pItem.name!="fpga_module")
                               {
                                  //如果是字符串形式
                                  if(pItem.name.Contains("*"))
                                  {
                                      this.WriteLine("\t\t{0}{1} = \"{2}\";\t//{3}",Prefix,pItem.name.Substring(1),pItem.value,pItem.note);
                                  }
                                  else{this.WriteLine("\t\t{0}{1} = {2};\t//{3}",Prefix,pItem.name,pItem.value,pItem.note);}
                                }
                            }
                            else if(isArray)
							{
								//如果是字符串形式
								if(pItem.name.Contains("*"))
								{
									this.WriteLine("\t\t{0}{1}[{2}] = \"{3}\";\t//{4}",Prefix,pItem.name.Substring(1),indexValue,pItem.value,pItem.note);
								}
							  else{this.WriteLine("\t\t{0}{1}[{2}] = {3};\t//{4}",Prefix,pItem.name,indexValue,pItem.value,pItem.note);}
							}
							
						}
					}
 #>