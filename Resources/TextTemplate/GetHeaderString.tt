<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SmallManagerSpace.Resources" #>
/******************************************************************************

        Copyright (C), 2002-2010, Wuhan FiberHome Tech. Co., Ltd.

******************************************************************************
   文 件 名   : "fhapp_otn_user_auto.h"
   版 本 号   : 初稿
   作    者   : 用户1
   生成日期   : <#= DateTime.Now.ToString("yyyy") #>年<#= DateTime.Now.ToString("MM") #>月<#= DateTime.Now.ToString("dd") #>日
   最近修改   :
   功能描述   : 单盘初始化信息处理
   函数列表   :
              
   修改历史   :
   1.日    期   : <#= DateTime.Now.ToString("yyyy") #>年<#= DateTime.Now.ToString("MM") #>月<#= DateTime.Now.ToString("dd") #>日
    作    者   : 用户1
    修改内容   : 创建文件

******************************************************************************/
#ifndef FHAPP_OTN_USER_AUTO_H
#define FHAPP_OTN_USER_AUTO_H

#include "fhapp_platform_adpt.h"
#pragma pack(1)

<# GenerateEnumText(); #>
<# GenerateStructText(); #>

#pragma pack()

#ifdef  __cplusplus
extern "C" 
{
#endif

<# GenerateFunctionText(); #>

#ifdef	__cplusplus
}
#endif	/* __cplusplus */

#endif


<#+ 
                    ///生成函数注释
                    private void GenerateFunctionAnnotation(string type,string pointer,string funcName)
                    {
                    
                        this.WriteLine("/******************************************************************************");
                        this.WriteLine("*函数名   :{0}",funcName);
                        this.WriteLine("*负责人   :");
                        this.WriteLine("*创建日期 :{0}",DateTime.Now.ToString("yyyyMMdd"));
                        this.WriteLine("*函数功能 :");
                        this.WriteLine("*输入参数 :无");
                        this.WriteLine("*输出参数 :{0}",pointer);
                        this.WriteLine("*返回值   :0 - 成功，-1 - 失败");
                        this.WriteLine("*调用关系 :");
                        this.WriteLine("*其它     :");
                        this.WriteLine("******************************************************************************/");
                                
                     }

                    ///生成函数定义
                    private void GenerateFunctionText()
                    {
                        if(ComData.showEntities.Count>=0)
                        {
                            foreach(ShowEntity i in ComData.showEntities)
                            {
                                GenerateFunctionAnnotation(i.argType,i.argName,i.funName);
                                this.WriteLine("{0} {1}({2} *{3});",i.retType,i.funName,i.argType,i.argName);
                                this.WriteLine("\r\n");
                            }
                        }
                    }
					///生成枚举体定义
                    private void GenerateEnumText()
					{   
		
						if(ComData.enumEntity!=null)
						{
						    foreach(simpleType TypeItem in  ComData.enumEntity.simpleTypes)
							{

								this.WriteLine("typedef enum");
								this.WriteLine("{");
								int count=TypeItem.EnumValues.Count();
								foreach(EnumValue ValueItem  in TypeItem.EnumValues)
								{
									if((--count)==0)
									{
									this.WriteLine("\t{0} = {1}",ValueItem.cn,ValueItem.value);
									}
									else
									{
									this.WriteLine("\t{0} = {1},",ValueItem.cn,ValueItem.value);
									}
								}		
								this.WriteLine("}"+TypeItem.name+";");	
								this.WriteLine("\r\n");	
							}
						}

					}
					///生成结构体定义
                    string lastName=null;
					private void GenerateStructText( )
					{   
						if(ComData.structEntity!=null)
						{
						    foreach(object ob in  ComData.structEntity.nodeList)
							{	
								StructItem sI=ob as StructItem;
								this.WriteLine("typedef struct"+" _"+sI.type.ToLower());
								this.WriteLine("{");
								foreach(object  paraItem  in sI.parameterList)
								{
									if(paraItem is Parameter)
								    {
										Parameter pIChi =paraItem as Parameter;                                       
										if(pIChi.preinput!="" && pIChi.preinput!="entry")
										{
                                             if(ComData.customEntryVar.ContainsKey(pIChi.preinput))
                                             {
                                                    this.WriteLine("\t{0} {1}[{2}];//{3}",pIChi.type,pIChi.name,ComData.customEntryVar[pIChi.preinput],pIChi.note);	
                                                    lastName=null;             
                                              }
                                             else if(ComData.customEntryVar.ContainsKey(pIChi.name) && lastName==null)
                                             {
                                                    this.WriteLine("\t{0} {1}[{2}];//{3}",pIChi.type,pIChi.name,ComData.customEntryVar[pIChi.name],pIChi.note);	
                                                    lastName=pIChi.name;             
                                             }
                                        }
										else 
										{
										this.WriteLine("\t{0} {1};//{2}",pIChi.type,pIChi.name,pIChi.note);
		                                lastName=null;  
										}
                                        
						
									}
									else if(paraItem is StructItem)
									{
										StructItem sIChi =paraItem as StructItem;
										if(sIChi.preinput!="" && sIChi.preinput!="entry" )
										{
                                            if(ComData.customEntryVar.ContainsKey(sIChi.preinput))
                                            {
										                this.WriteLine("\t{0} {1}[{2}];//{3}",sIChi.type,sIChi.name,ComData.customEntryVar[sIChi.preinput],sIChi.note);	
                                                        lastName=null; 
                                            }
                                            else if(ComData.customEntryVar.ContainsKey(sIChi.name) && lastName==null)
                                            {
										                this.WriteLine("\t{0} {1}[{2}];//{3}",sIChi.type,sIChi.name,ComData.customEntryVar[sIChi.name],sIChi.note);	                                            
                                                        lastName=sIChi.name; 
                                            }
										}
										else 
										{
										this.WriteLine("\t{0} {1};//{2}",sIChi.type,sIChi.name,sIChi.note);	
	                                    lastName=null;
										}
									}	
								}		
								this.WriteLine("}"+sI.type+";");	
								this.WriteLine("\r\n");	
							}
						}
                     
					}
                  
 #>