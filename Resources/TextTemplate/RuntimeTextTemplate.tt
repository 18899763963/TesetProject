<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SmallManagerSpace.Resources" #>
/******************************************************************************

        Copyright (C), 2002-2010, Wuhan FiberHome Tech. Co., Ltd.

******************************************************************************
   文 件 名   : <#= ComData.saveCFileName #>
   版 本 号   : 初稿
   作    者   : xhou
   生成日期   : <#= DateTime.Now.ToString("yyyy") #>年<#= DateTime.Now.ToString("MM") #>月<#= DateTime.Now.ToString("dd") #>日
   最近修改   :
   功能描述   : 单盘初始化信息处理
   函数列表   :
              
   修改历史   :
   1.日    期   : <#= DateTime.Now.ToString("yyyy") #>年<#= DateTime.Now.ToString("MM") #>月<#= DateTime.Now.ToString("dd") #>日
    作    者   : xhou
    修改内容   : 创建文件

******************************************************************************/

/*----------------------------------------------*
* 包含头文件                                   *
*----------------------------------------------*/
#include "<#= ComData.headSourceFileName #>"


AAL_INT32 otn_user_get_btype_info(OTN_USER_B_TYPE_INFO *btype_info)
{
<# GenerateTextToFunction("OTN_USER_B_TYPE_INFO","btype_info->"); #>
}

AAL_INT32 otn_user_get_btype(AAL_UINT8 *btype)
{
    return 0;
}

AAL_INT32 otn_user_get_board_info(AAL_UINT8 index, OTN_USER_BOARD_INFO *board_info)
{

<# GenerateTextToFunction("OTN_USER_BOARD_INFO","board_info->"); #>
}

AAL_INT32 otn_user_get_port_info(AAL_UINT8 index, OTN_USER_PORT_INFO *port_info)
{
<# GenerateTextToFunction("OTN_USER_PORT_INFO","port_info->"); #>
}

AAL_INT32 otn_user_get_fpga_info(AAL_UINT8 index, OTN_USER_FPGA_INFO *fpga_info)
{
<# GenerateTextToFunction("OTN_USER_FPGA_INFO","fpga_info->"); #>
}

AAL_INT32 otn_user_get_board_alm_info(AAL_UINT8 index, OTN_USER_BOARD_ALM_INFO *board_alm_info)
{
<# GenerateTextToFunction("OTN_USER_BOARD_ALM_INFO","board_alm_info->"); #>
}

AAL_INT32 otn_user_get_ssm_info(AAL_UINT8 index, OTN_USER_SSM_INFO *ssm_info)
{
<# GenerateTextToFunction("OTN_USER_SSM_INFO","ssm_info->"); #>
}

AAL_INT32 otn_user_fpga_read(AAL_UINT8 chip_no,AAL_UINT32 fpga_addr, AAL_UINT32 *data)
{
    return 0;
}

AAL_INT32 otn_user_fpga_write(AAL_UINT8 chip_no,AAL_UINT32 fpga_addr, AAL_UINT32 data)
{
    return 0;
}

AAL_INT32 otn_user_get_pwr_uvalm(AAL_UINT8 chip_no, AAL_UINT8 pwr_pin, AAL_UINT8 *alm_value)
{
    return 0;
}

AAL_INT32 otn_user_get_pwr_ovalm(AAL_UINT8 chip_no, AAL_UINT8 pwr_pin, AAL_UINT8 *alm_value)
{
    return 0;
}

AAL_INT32 otn_user_get_clk_status(AAL_UINT8 chip_no, AAL_UINT8 *alm_value)
{
    return 0;
}

AAL_INT32 otn_user_get_board_temp(AAL_UINT8 chip_no, AAL_FLOAT32 *temp)
{
    return 0;
}

AAL_INT32 otn_user_get_framer_temp(AAL_UINT8 chip_no, AAL_FLOAT32 *temp)
{
    return 0;
}
<#+ 
                    ///得到BoardNum数量
				    private string GetBoardNum()
					{
						var FirstList=ComData.customStruct.nodeList.FirstOrDefault();
					    StructItem firstItem= FirstList as StructItem;
						var sItem=	firstItem.parameterList.Where(x => (x as Parameter).name == "board_num").ToList();
						 Parameter Item=sItem.FirstOrDefault() as Parameter;
						return	Item.value;
					}
                    ///得到pointerName
                    private string GetPointerName(string input)
					{   
                        string substring="";
                        if(input.Contains("->"))
                        {
                            substring= input.Substring(0,input.IndexOf('-'));
                        }
                        return substring;
					}
                    ///生成字符串入口函数
					private void GenerateTextToFunction(string type,string pointer)
					{
				
						//分类指定type的数据
						var StructList=ComData.customStruct.nodeList.Where(x => (x as StructItem).type == type).ToList(); 
						//添加校验项目					
                        this.Write("\tif(index>={0})",GetBoardNum());						
                        this.WriteLine("\t{"+GetPointerName(pointer)+"=null;return -1;}");						
					  //遍历其中的项目		
					   this.WriteLine("\tswitch({0})","index");
					   this.WriteLine("\t{");
					   int i=0;
						foreach(var StructItem in StructList)
						{
							this.WriteLine("\t case {0}:",i);
							TraversalStructItem(StructItem,pointer,false,0);
							this.WriteLine("\t break;");
							i++;
						}
						this.WriteLine("\t}");
                        this.WriteLine("\treturn 0;");	
					}
					///将parameter struct对象分别放入不同队列
					private List<Dictionary<string,List<object>>> GroupSameObject(List<object> objList)
					{
						List<Dictionary<string,List<object>>> listDic=new List<Dictionary<string,List<object>>>();
						Dictionary<string,List<object>> parameDic=new Dictionary<string,List<object>>(){ };
						Dictionary<string,List<object>> structDic=new Dictionary<string,List<object>>(){ };
						
						foreach(object oI in objList)
						{
							if(oI is StructItem)
							{
								   //添加StructItem到字典
								  StructItem pItem=oI as StructItem;
									//如果初次添加
									if(!structDic.ContainsKey(pItem.name))
									{
										//List<object> objList=new List<object>();
										structDic[pItem.name]=new List<object>();
									}
								  structDic[pItem.name].Add(oI);
							}
							else if(oI is Parameter)
							{
									//添加Parameter到字典
								  Parameter sItem=oI as Parameter;
								   //如果初次添加
									if(!parameDic.ContainsKey(sItem.name))
									{
										//List<object> objList=new List<object>();
										parameDic[sItem.name]=new List<object>();
									}
								  parameDic[sItem.name].Add(oI);
							}
						}
								listDic.Add(parameDic);
								listDic.Add(structDic);								
								return listDic;
								
					}
                ///遍历得到树形结构字符串
				private void TraversalStructItem(object ObjItem,string Prefix,bool isArray,int indexValue)
				{		
						if(ObjItem==null) return ;
						if(ObjItem is StructItem)
						{	 
								StructItem sItem=ObjItem as StructItem;			
								//第一个队列放structDic，第二个队列放parameDic
							  List<Dictionary<string,List<object>>> gruopObj=GroupSameObject(sItem.parameterList);
							  Dictionary<string,List<object>> parameDic=gruopObj[0];
							  Dictionary<string,List<object>> structDic=gruopObj[1];							 
								//处理parameDic
							 foreach(string pName in parameDic.Keys)
							{	
								//如果不是数组
									List<object> paraList= parameDic[pName];															
									if(paraList.Count==1)
									{
										TraversalStructItem(paraList[0], Prefix,false ,0);
									}
								//如果是数组
									else if(paraList.Count>1)
									{
										for(int i=0;i<paraList.Count;i++)
										{
											TraversalStructItem(paraList[i], Prefix,true,i);
									    }
									}
							}
							//处理structDic
							 foreach(string sName in structDic.Keys)
							{	
								//如果不是数组
									List<object> strucList= structDic[sName];
									if(strucList.Count==1)
									{
										string newPerfix=string.Format("{0}{1}{2}",Prefix ,sName,".");
										TraversalStructItem(strucList[0], newPerfix,false ,0);
									}
								//如果是数组
									else if(strucList.Count>1)
									{
										for(int i=0;i<strucList.Count;i++)
										{
											string newPerfix=string.Format("{0}{1}[{2}].",Prefix ,sName,i);
											TraversalStructItem(strucList[i], newPerfix,true,i);
									    }
									}
							}
							
						}
						else if(ObjItem is Parameter)
						{
						    Parameter pItem=ObjItem as Parameter;
							if(!isArray)
							{
								//如果是字符串形式
								if(pItem.name.Contains("*"))
								{
									this.WriteLine("\t\t{0}{1}=\"{2}\";\t//{3}",Prefix,pItem.name,pItem.value,pItem.note);
								}
								else{this.WriteLine("\t\t{0}{1}={2};\t//{3}",Prefix,pItem.name,pItem.value,pItem.note);}
							}else if(isArray)
							{
								//如果是字符串形式
								if(pItem.name.Contains("*"))
								{
									this.WriteLine("\t\t{0}{1}[{2}]=\"{3}\";\t//{4}",Prefix,pItem.name,indexValue,pItem.value,pItem.note);
								}
							  else{this.WriteLine("\t\t{0}{1}[{2}]={3};\t//{4}",Prefix,pItem.name,indexValue,pItem.value,pItem.note);}
							}
							
						}
					}
 #>

<#+  

private void GenerateText(string type,string pointer)//生成文本   
{  
   var StructList=ComData.customStruct.nodeList.Where(x => (x as StructItem).type == type).ToList(); 
   string space;
   if(StructList.Count>1)
   { 
    space="        "; #>
    switch(<#= StructList.Count #>)
    {
<#+ for(int i=0;i<StructList.Count;i++)
	      { 
		  var ParameterList=(StructList[i] as StructItem).parameterList.ToList();#>
	    case <#= i+1 #>:
<#+ JudgeType(ParameterList,pointer,space);#>
<#+ } #>
    }
<#+ } #>
<#+ else if(StructList.Count==1)
   {  
    space="    ";
    var ParameterList=(StructList[0] as StructItem).parameterList.ToList();#>
<#+ JudgeType(ParameterList,pointer,space); #>
<#+ } #>
    return 0;
<#+  
}
#>

<#+
private void JudgeType(List<object> list,string pointer,string space)//判断是StructItem类型还是Parameter类型(暂时只针对一层嵌套)
{
   for(int j=0;j<list.Count;j++)
	  { 
	     if(list[j] is StructItem)
		 {
		    StructItem nestStructItem=list[j] as StructItem;
			for(int m=0;m<nestStructItem.parameterList.Count;m++)
			{ //如果不是结构体数组
			 if(nestStructItem.index=="")
			 {
			    if((nestStructItem.parameterList[m] as Parameter).index == "")
			    { #>
<#= space #><#= pointer #>-><#= nestStructItem.name #>.<#= (nestStructItem.parameterList[m] as Parameter).name #> = <#= (nestStructItem.parameterList[m] as Parameter).value #>;  //<#= (nestStructItem.parameterList[m] as Parameter).note #>
<#+ } 
                else
			    { #>
<#= space #><#= pointer #>-><#= nestStructItem.name #>.<#= (nestStructItem.parameterList[m] as Parameter).name #>[<#= (nestStructItem.parameterList[m] as Parameter).index #>] = <#= (nestStructItem.parameterList[m] as Parameter).value #>;  //<#= (nestStructItem.parameterList[m] as Parameter).note #>
<#+ } #>
<#+ } 
		     else
			 { //如果是结构体数组
			    if((nestStructItem.parameterList[m] as Parameter).index == "")
			    { #>
<#= space #><#= pointer #>-><#= nestStructItem.name #>[<#= nestStructItem.index #>].<#= (nestStructItem.parameterList[m] as Parameter).name #> = <#= (nestStructItem.parameterList[m] as Parameter).value #>;  //<#= (nestStructItem.parameterList[m] as Parameter).note #>
<#+ } 
                else
			    { #>
<#= space #><#= pointer #>-><#= nestStructItem.name #>[<#= nestStructItem.index #>].<#= (nestStructItem.parameterList[m] as Parameter).name #>[<#= (nestStructItem.parameterList[m] as Parameter).index #>] = <#= (nestStructItem.parameterList[m] as Parameter).value #>;  //<#= (nestStructItem.parameterList[m] as Parameter).note #>
<#+ } #>
<#+ } #>
<#+ } #>
<#+ } #>
<#+ else if(list[j] is Parameter)
	     { 
		    if((list[j] as Parameter).index == "")
			{ #>
<#= space #><#= pointer #>-><#= (list[j] as Parameter).name #> = <#= (list[j] as Parameter).value #>;  //<#= (list[j] as Parameter).note #>
<#+ } 
            else
			{ #>
<#= space #><#= pointer #>-><#= (list[j] as Parameter).name #>[<#= (list[j] as Parameter).index #>] = <#= (list[j] as Parameter).value #>;  //<#= (list[j] as Parameter).note #>
<#+ } #>
<#+ } #>
<#+ } #>
<#+  
}
#>