// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmallManagerSpace.Resources.TextTemplate
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SmallManagerSpace.Resources;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class RuntimeTextTemplate : RuntimeTextTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"/******************************************************************************

        Copyright (C), 2002-2010, Wuhan FiberHome Tech. Co., Ltd.

******************************************************************************
   文 件 名   : fhapp_otn_user_auto.cpp
   版 本 号   : 初稿
   作    者   : xhou
   生成日期   : ");
            
            #line 15 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy")));
            
            #line default
            #line hidden
            this.Write("年");
            
            #line 15 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("MM")));
            
            #line default
            #line hidden
            this.Write("月");
            
            #line 15 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("dd")));
            
            #line default
            #line hidden
            this.Write("日\r\n   最近修改   :\r\n   功能描述   : 单盘初始化信息处理\r\n   函数列表   :\r\n              \r\n   修改历史   :\r\n" +
                    "   1.日    期   : ");
            
            #line 21 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy")));
            
            #line default
            #line hidden
            this.Write("年");
            
            #line 21 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("MM")));
            
            #line default
            #line hidden
            this.Write("月");
            
            #line 21 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("dd")));
            
            #line default
            #line hidden
            this.Write(@"日
    作    者   : xhou
    修改内容   : 创建文件

******************************************************************************/

/*----------------------------------------------*
* 包含头文件                                   *
*----------------------------------------------*/
#include ""fhapp_otn_user_auto.h""


AAL_INT32 otn_user_get_btype_info(OTN_USER_B_TYPE_INFO *btype_info)
{
");
            
            #line 35 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
 GenerateTextToFunction("OTN_USER_B_TYPE_INFO","btype_info->" ,""); 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\nAAL_INT32 otn_user_get_btype(AAL_UINT8 *btype)\r\n{\r\n    return 0;\r\n}\r\n\r\nAAL_I" +
                    "NT32 otn_user_get_board_info(AAL_UINT8 index, OTN_USER_BOARD_INFO *board_info)\r\n" +
                    "{\r\n\r\n");
            
            #line 46 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
 GenerateTextToFunction("OTN_USER_BOARD_INFO","board_info->","index"); 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\nAAL_INT32 otn_user_get_port_info(AAL_UINT8 index, OTN_USER_PORT_INFO *port_i" +
                    "nfo)\r\n{\r\n");
            
            #line 51 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
 GenerateTextToFunction("OTN_USER_PORT_INFO","port_info->","index"); 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\nAAL_INT32 otn_user_get_fpga_info(AAL_UINT8 index, OTN_USER_FPGA_INFO *fpga_i" +
                    "nfo)\r\n{\r\n");
            
            #line 56 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
 GenerateTextToFunction("OTN_USER_FPGA_INFO","fpga_info->","index"); 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\nAAL_INT32 otn_user_get_board_alm_info(AAL_UINT8 index, OTN_USER_BOARD_ALM_IN" +
                    "FO *board_alm_info)\r\n{\r\n");
            
            #line 61 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
 GenerateTextToFunction("OTN_USER_BOARD_ALM_INFO","board_alm_info->","index"); 
            
            #line default
            #line hidden
            this.Write(@"}


AAL_INT32 otn_user_fpga_read(AAL_UINT8 chip_no,AAL_UINT32 fpga_addr, AAL_UINT32 *data)
{
    return 0;
}

AAL_INT32 otn_user_fpga_write(AAL_UINT8 chip_no,AAL_UINT32 fpga_addr, AAL_UINT32 data)
{
    return 0;
}

AAL_INT32 otn_user_get_pwr_uvalm(AAL_UINT8 chip_no, AAL_UINT8 pwr_pin, AAL_UINT8 *alm_value)
{
    return 0;
}

AAL_INT32 otn_user_get_pwr_ovalm(AAL_UINT8 chip_no, AAL_UINT8 pwr_pin, AAL_UINT8 *alm_value)
{
    return 0;
}

AAL_INT32 otn_user_get_clk_status(AAL_UINT8 chip_no, AAL_UINT8 *alm_value)
{
    return 0;
}

AAL_INT32 otn_user_get_board_temp(AAL_UINT8 chip_no, AAL_FLOAT32 *temp)
{
    return 0;
}

AAL_INT32 otn_user_get_framer_temp(AAL_UINT8 chip_no, AAL_FLOAT32 *temp)
{
    return 0;
}
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 99 "F:\WorkProject\Fiber_Project\2.Software\GenCode Tools10.0\GenCode Tools\Resources\TextTemplate\RuntimeTextTemplate.tt"
 
                    ///得到BoardNum数量
				    private string GetBoardNum()
					{
						var FirstList=ComData.customStruct.nodeList.FirstOrDefault();
					    StructItem firstItem= FirstList as StructItem;
						var sItem=	firstItem.parameterList.Where(x => (x as Parameter).name == "board_num").ToList();
						 Parameter Item=sItem.FirstOrDefault() as Parameter;
						return	Item.value;
					}
                    ///得到pointerName
                    private string GetPointerName(string input)
					{   
                        string substring="";
                        if(input.Contains("->"))
                        {
                            substring= input.Substring(0,input.IndexOf('-'));
                        }
                        return substring;
					}
                    ///生成字符串入口函数
					private void GenerateTextToFunction(string type,string pointer,string indexName)
    {
				
        //分类指定type的数据
        var StructList=ComData.customStruct.nodeList.Where(x => (x as StructItem).type == type).ToList(); 
        //添加校验项目					
        if(indexName!="")
        {
            this.WriteLine("\tif(index >= {0})",GetBoardNum());	
            this.WriteLine("\t{");
            this.WriteLine("\t\t"+GetPointerName(pointer)+" = NULL;");	
            this.WriteLine("\t\treturn -1;");
            this.WriteLine("\t}");
            this.WriteLine("\tswitch({0})","index");
        }
        //遍历其中的项目		
        if(indexName==""){this.WriteLine("\tswitch(0)");}
					  
        this.WriteLine("\t{");
        int i=0;
        foreach(var StructItem in StructList)
        {
            this.WriteLine("\t\tcase {0}:",i);
            TraversalStructItem(StructItem,pointer,false,0);
            this.WriteLine("\t\tbreak;");
            i++;
        }
        //添加default:break;字符串
        this.WriteLine("\t\tdefault:");
        this.WriteLine("\t\tbreak;");
        this.WriteLine("\t}");
        this.WriteLine("\treturn 0;");	
    }
					///将parameter struct对象分别放入不同队列
					private List<Dictionary<string,List<object>>> GroupSameObject(List<object> objList)
					{
						List<Dictionary<string,List<object>>> listDic=new List<Dictionary<string,List<object>>>();
						Dictionary<string,List<object>> parameDic=new Dictionary<string,List<object>>(){ };
						Dictionary<string,List<object>> structDic=new Dictionary<string,List<object>>(){ };
						
						foreach(object oI in objList)
						{
							if(oI is StructItem)
							{
								   //添加StructItem到字典
								  StructItem pItem=oI as StructItem;
									//如果初次添加
									if(!structDic.ContainsKey(pItem.name))
									{
										//List<object> objList=new List<object>();
										structDic[pItem.name]=new List<object>();
									}
								  structDic[pItem.name].Add(oI);
							}
							else if(oI is Parameter)
							{
									//添加Parameter到字典
								  Parameter sItem=oI as Parameter;
								   //如果初次添加
									if(!parameDic.ContainsKey(sItem.name))
									{
										//List<object> objList=new List<object>();
										parameDic[sItem.name]=new List<object>();
									}
								  parameDic[sItem.name].Add(oI);
							}
						}
								listDic.Add(parameDic);
								listDic.Add(structDic);								
								return listDic;
								
					}
                ///遍历得到树形结构字符串
				private void TraversalStructItem(object ObjItem,string Prefix,bool isArray,int indexValue)
				{		
						if(ObjItem==null) return ;
						if(ObjItem is StructItem)
						{	 
								StructItem sItem=ObjItem as StructItem;			
								//第一个队列放structDic，第二个队列放parameDic
							  List<Dictionary<string,List<object>>> gruopObj=GroupSameObject(sItem.parameterList);
							  Dictionary<string,List<object>> parameDic=gruopObj[0];
							  Dictionary<string,List<object>> structDic=gruopObj[1];							 
								//处理parameDic
							 foreach(string pName in parameDic.Keys)
							{	
								//如果根据数量只有一个
									List<object> paraList= parameDic[pName];															
									if(paraList.Count==1)
									{
                                        //如果数量只有一个,但是原来定义为数组类型
                                        Parameter m= paraList[0] as Parameter;
                                        if(m.index!="")	{TraversalStructItem(paraList[0], Prefix,true,0);}
                                        //如果不是数组(根据数量只有一个)
										else{TraversalStructItem(paraList[0], Prefix,false ,0);}
									}
								//如果数量多于一个，则一定是数组
									else if(paraList.Count>1)
									{
										for(int i=0;i<paraList.Count;i++)
										{
											TraversalStructItem(paraList[i], Prefix,true,i);
									    }
									}
							}
							//处理structDic
							 foreach(string sName in structDic.Keys)
							{	
								//如果数量只有一个
									List<object> strucList= structDic[sName];
									if(strucList.Count==1)
									{
                                        //如果数量只有一个,但是原来定义为数组类型
                                        StructItem m= strucList[0] as StructItem;
                                        
                                        if(m.index!="")	{
                                            string newPerfix=string.Format("{0}{1}[0]{2}",Prefix ,sName,".");
                                            TraversalStructItem(strucList[0], newPerfix,true ,0);
                                            }
                                        //如果不是数组(根据数量只有一个)
										else{
                                                string newPerfix=string.Format("{0}{1}{2}",Prefix ,sName,".");
                                                TraversalStructItem(strucList[0], newPerfix,false ,0);}			
									         }
								//如果数量多于一个，则一定是数组
									else if(strucList.Count>1)
									{
										for(int i=0;i<strucList.Count;i++)
										{
											string newPerfix=string.Format("{0}{1}[{2}].",Prefix ,sName,i);
											TraversalStructItem(strucList[i], newPerfix,true,i);
									    }
									}
							}
							
						}
						else if(ObjItem is Parameter)
						{
						    Parameter pItem=ObjItem as Parameter;
							if(!isArray)
                            {
                               //去除fpga_module这一项
                               if(pItem.name!="fpga_module")
                               {
                                  //如果是字符串形式
                                  if(pItem.name.Contains("*"))
                                  {
                                      this.WriteLine("\t\t{0}{1} = \"{2}\";\t//{3}",Prefix,pItem.name.Substring(1),pItem.value,pItem.note);
                                  }
                                  else{this.WriteLine("\t\t{0}{1} = {2};\t//{3}",Prefix,pItem.name,pItem.value,pItem.note);}
                                }
                            }
                            else if(isArray)
							{
								//如果是字符串形式
								if(pItem.name.Contains("*"))
								{
									this.WriteLine("\t\t{0}{1}[{2}] = \"{3}\";\t//{4}",Prefix,pItem.name.Substring(1),indexValue,pItem.value,pItem.note);
								}
							  else{this.WriteLine("\t\t{0}{1}[{2}] = {3};\t//{4}",Prefix,pItem.name,indexValue,pItem.value,pItem.note);}
							}
							
						}
					}
 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class RuntimeTextTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
