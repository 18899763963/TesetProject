// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmallManagerSpace.Resources.TextTemplate
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SmallManagerSpace.Resources;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class GetHeaderString : GetHeaderStringBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"/******************************************************************************

        Copyright (C), 2002-2010, Wuhan FiberHome Tech. Co., Ltd.

******************************************************************************
   文 件 名   : ""fhapp_otn_user_auto.h""
   版 本 号   : 初稿
   作    者   : 用户1
   生成日期   : ");
            
            #line 15 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy")));
            
            #line default
            #line hidden
            this.Write("年");
            
            #line 15 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("MM")));
            
            #line default
            #line hidden
            this.Write("月");
            
            #line 15 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("dd")));
            
            #line default
            #line hidden
            this.Write("日\r\n   最近修改   :\r\n   功能描述   : 单盘初始化信息处理\r\n   函数列表   :\r\n              \r\n   修改历史   :\r\n" +
                    "   1.日    期   : ");
            
            #line 21 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy")));
            
            #line default
            #line hidden
            this.Write("年");
            
            #line 21 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("MM")));
            
            #line default
            #line hidden
            this.Write("月");
            
            #line 21 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("dd")));
            
            #line default
            #line hidden
            this.Write(@"日
    作    者   : 用户1
    修改内容   : 创建文件

******************************************************************************/
#ifndef FHAPP_OTN_USER_AUTO_H
#define FHAPP_OTN_USER_AUTO_H

#include ""fhapp_platform_adpt.h""
#include ""fhapp_board_comm_inf.h""
#include ""fhapp_otn_drv_adpt_inf.h""
#include ""cbb_comm.h""
#include ""fpga_app_inf.h""
#include ""fhapp_otn_opt_drv_adapt_inf.h""
#include ""fhapp_optical_adapt_inf.h""
#include ""prbs_eth_comm_inf.h""
#include ""otn_encryption_info.h""//加密头文件
#include ""uasLibV2.h""

#define	OTN_USER_BOARD_NUM_MAX		5         //单盘软件共用最大单盘数量
#define	OTN_USER_LOGIC_PORT_NUM_MAX		80         //单盘逻辑口最大数量
#define	OTN_USER_PHY_PORT_NUM_MAX		80         //单盘物理口最大数量
#define	OTN_USER_POWER_PIN_MAX		10         //最大监测电源数
#define	OTN_USER_FPGA_MODULE_MAX		5         //最大监测电源数

#pragma pack(1)

");
            
            #line 48 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
 GenerateEnumText(); 
            
            #line default
            #line hidden
            
            #line 49 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
 GenerateStructText(); 
            
            #line default
            #line hidden
            this.Write(@"
#pragma pack()

#ifdef  __cplusplus
extern ""C"" 
{
#endif

AAL_INT32 otn_user_get_btype_info(OTN_USER_B_TYPE_INFO *btype_info);

AAL_INT32 otn_user_get_btype(AAL_UINT8 *btype);

AAL_INT32 otn_user_get_board_info(AAL_UINT8 index, OTN_USER_BOARD_INFO *board_info);

AAL_INT32 otn_user_get_port_info(AAL_UINT8 index, OTN_USER_PORT_INFO *port_info);

AAL_INT32 otn_user_get_fpga_info(AAL_UINT8 index, OTN_USER_FPGA_INFO *fpga_info);

AAL_INT32 otn_user_get_board_alm_info(AAL_UINT8 index, OTN_USER_BOARD_ALM_INFO *board_alm_info);

AAL_INT32 otn_user_fpga_read(AAL_UINT8 chip_no,AAL_UINT32 fpga_addr, AAL_UINT32 *data);

AAL_INT32 otn_user_fpga_write(AAL_UINT8 chip_no,AAL_UINT32 fpga_addr, AAL_UINT32 data);

AAL_INT32 otn_user_get_pwr_uvalm(AAL_UINT8 chip_no, AAL_UINT8 pwr_pin, AAL_UINT8 *alm_value);

AAL_INT32 otn_user_get_pwr_ovalm(AAL_UINT8 chip_no, AAL_UINT8 pwr_pin, AAL_UINT8 *alm_value);

AAL_INT32 otn_user_get_clk_status(AAL_UINT8 chip_no, AAL_UINT8 *alm_value);

AAL_INT32 otn_user_get_board_temp(AAL_UINT8 chip_no, AAL_FLOAT32 *temp);

AAL_INT32 otn_user_get_framer_temp(AAL_UINT8 chip_no, AAL_FLOAT32 *temp);

#ifdef	__cplusplus
}
#endif	/* __cplusplus */

#endif


");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 91 "F:\WorkProject\Fiber_Project\2.Software\GenCodeTools\GenCodeTools\Resources\TextTemplate\GetHeaderString.tt"
 

					///生成枚举体定义
                    private void GenerateEnumText()
					{   
		
						if(ComData.enumEntity!=null)
						{
						    foreach(simpleType TypeItem in  ComData.enumEntity.simpleTypes)
							{

								this.WriteLine("typedef enum");
								this.WriteLine("{");
								int count=TypeItem.EnumValues.Count();
								foreach(EnumValue ValueItem  in TypeItem.EnumValues)
								{
									if((--count)==0)
									{
									this.WriteLine("\t{0} = {1}",ValueItem.cn,ValueItem.value);
									}
									else
									{
									this.WriteLine("\t{0} = {1},",ValueItem.cn,ValueItem.value);
									}
								}		
								this.WriteLine("}"+TypeItem.name+";");	
								this.WriteLine("\r\n");	
							}
						}

					}
					///生成结构体定义
                    string lastName=null;
					private void GenerateStructText( )
					{   
						if(ComData.structEntity!=null)
						{
						    foreach(object ob in  ComData.structEntity.nodeList)
							{	
								StructItem sI=ob as StructItem;
								this.WriteLine("typedef struct"+" _"+sI.type.ToLower());
								this.WriteLine("{");
								foreach(object  paraItem  in sI.parameterList)
								{
									if(paraItem is Parameter)
								    {
										Parameter pIChi =paraItem as Parameter;                                       
										if(pIChi.preinput!="" && pIChi.preinput!="entry")
										{
                                             if(ComData.customEntryVar.ContainsKey(pIChi.preinput))
                                             {
                                                    this.WriteLine("\t{0} {1}[{2}];//{3}",pIChi.type,pIChi.name,ComData.customEntryVar[pIChi.preinput],pIChi.note);	
                                                    lastName=null;             
                                              }
                                             else if(ComData.customEntryVar.ContainsKey(pIChi.name) && lastName==null)
                                             {
                                                    this.WriteLine("\t{0} {1}[{2}];//{3}",pIChi.type,pIChi.name,ComData.customEntryVar[pIChi.name],pIChi.note);	
                                                    lastName=pIChi.name;             
                                             }
                                        }
										else 
										{
										this.WriteLine("\t{0} {1};//{2}",pIChi.type,pIChi.name,pIChi.note);
		                                lastName=null;  
										}
                                        
						
									}
									else if(paraItem is StructItem)
									{
										StructItem sIChi =paraItem as StructItem;
										if(sIChi.preinput!="" && sIChi.preinput!="entry" )
										{
                                            if(ComData.customEntryVar.ContainsKey(sIChi.preinput))
                                            {
										                this.WriteLine("\t{0} {1}[{2}];//{3}",sIChi.type,sIChi.name,ComData.customEntryVar[sIChi.preinput],sIChi.note);	
                                                        lastName=null; 
                                            }
                                            else if(ComData.customEntryVar.ContainsKey(sIChi.name) && lastName==null)
                                            {
										                this.WriteLine("\t{0} {1}[{2}];//{3}",sIChi.type,sIChi.name,ComData.customEntryVar[sIChi.name],sIChi.note);	                                            
                                                        lastName=sIChi.name; 
                                            }
										}
										else 
										{
										this.WriteLine("\t{0} {1};//{2}",sIChi.type,sIChi.name,sIChi.note);	
	                                    lastName=null;
										}
									}	
								}		
								this.WriteLine("}"+sI.type+";");	
								this.WriteLine("\r\n");	
							}
						}
                     
					}
                  
 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class GetHeaderStringBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
