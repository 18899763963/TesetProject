<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmallManager</name>
    </assembly>
    <members>
        <member name="F:SmallManagerSpace.LoginMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SmallManagerSpace.LoginMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SmallManagerSpace.LoginMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SmallManagerSpace.Forms.SendFileToDiskMessageBoxcs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Forms.SendFileToDiskMessageBoxcs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SmallManagerSpace.Forms.SendFileToDiskMessageBoxcs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SmallManagerSpace.Forms.TipMessageBoxcs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Forms.TipMessageBoxcs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SmallManagerSpace.Forms.TipMessageBoxcs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SmallManagerSpace.Raws.Resource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.Base_Enum">
             <summary>
               查找类似 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xdo=&quot;urn:pxp&quot; xmlns:ms=&quot;urn:schemas-microsoft-com:xslt&quot; xmlns:stack=&quot;urn:anything&quot; xmlns:xdb=&quot;http://xmlns.oracle.com/xdb&quot; xmlns:w=&quot;http://www.fiberhome.com.cn/board/control&quot;&gt;  
              &lt;xsd:simpleType name=&quot;TIME4BYTE&quot;&gt;
                &lt;xsd:restriction base=&quot;xsd:hexBinary&quot;&gt;
                  &lt;xsd:length value=&quot;4&quot;/&gt;
                &lt;/xsd:restriction&gt;
              &lt;/xsd:simpleType&gt;
              &lt;xsd:simpleType name=&quot;configBlockName&quot;&gt;
                &lt;xsd:restriction base=&quot;xsd [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.BlockIco">
            <summary>
              查找类似于 (图标) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.Enum">
             <summary>
               查找类似 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-16&quot;?&gt;
            
            &lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xdo=&quot;urn:pxp&quot; xmlns:ms=&quot;urn:schemas-microsoft-com:xslt&quot; xmlns:stack=&quot;urn:anything&quot; xmlns:xdb=&quot;http://xmlns.oracle.com/xdb&quot; xmlns:w=&quot;http://www.fiberhome.com.cn/board/control&quot;&gt;  
              &lt;!--***********************简单类型***********************--&gt;
              &lt;xsd:simpleType name=&quot;IMA_Clock_Mode&quot;&gt;
                &lt;xsd:restriction base=&quot;xsd:byte&quot;&gt;
                  &lt;xsd:length value=&quot;1&quot;/&gt;
                  &lt;xsd:enumeration w:en=&quot;Sys_Clock&quot; w:cn=&quot;系统时钟&quot; value=&quot;00 [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.Green">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.ParameterIco">
            <summary>
              查找类似于 (图标) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.PathIco">
            <summary>
              查找类似于 (图标) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.Red">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Raws.Resource.Tamplate_XSL">
             <summary>
               查找类似 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xsl:stylesheet version=&quot;1.0&quot;    xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
              &lt;xsl:output method =&quot;xml&quot; version =&quot;1.0&quot; encoding =&quot;gb2312&quot; indent=&quot;yes&quot; /&gt;
              &lt;xsl:param name=&quot;baseFile&quot;/&gt;
            
              &lt;xsl:template name=&quot;start&quot; match=&quot;node()&quot;&gt;
                &lt;xsl:copy&gt;
                  &lt;xsl:copy-of select=&quot;@*&quot; /&gt;
                  &lt;xsl:attribute name=&quot;CID&quot;&gt;
                    &lt;xsl:value-of select=&quot;generate-id(.)&quot;/&gt;
                  &lt;/xsl:attribute&gt;
                  &lt;xsl:apply-template [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="T:SmallManagerSpace.Resources.ClassInfo">
            <summary>
            班级信息类
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.ClassInfo.ClassID">
            <summary>
            班级ID
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.ClassInfo.ClassName">
            <summary>
            班级名称
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.ClassInfo.Teacher">
            <summary>
            班长人
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.ClassInfo.StudentList">
            <summary>
            学生列表
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ComRunDatas.InitCommonData">
            <summary>
            初始化程序运行的公共数据
            </summary>
        </member>
        <member name="T:SmallManagerSpace.Resources.DataModel">
            <summary>
            用户信息类
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.DataModel.ID">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.DataModel.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.DataModel.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:SmallManagerSpace.Resources.BaseData">
            <summary>
            用于存储base文件中的数据
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.BaseDataOperation.GetBaseElementString(System.Xml.Linq.XElement)">
            <summary>
            通过文件根节点得到数据
            </summary>
            <param name="xRootElements">文件根节点</param>
            <returns>返回数据列表</returns>
        </member>
        <member name="T:SmallManagerSpace.Resources.EntitySerializeHelper">
            <summary>
            XML序列化公共处理类
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.EntitySerializeHelper.XmlSerializeOnFile``1(``0)">
            <summary>
            将实体对象转换成XML文件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
        </member>
        <member name="M:SmallManagerSpace.Resources.EntitySerializeHelper.XmlSerializeOnString``1(``0,System.String)">
            <summary>
            将实体对象转换成XML
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="obj">实体对象</param>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:SmallManagerSpace.Resources.EntitySerializeHelper.DESerializerOnFile``1(System.String)">
            <summary>
            将XML文件转换成实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:SmallManagerSpace.Resources.EntitySerializeHelper.DESerializerOnString``1(System.String)">
            <summary>
            将XML转换成实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="strXML">XML</param>
        </member>
        <member name="M:SmallManagerSpace.Resources.EventLogClass.SaveErrorEventLog(System.String,System.String,System.String)">
            *****第二种*******/
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.XmlSerializeToStructFile(System.String,System.String)">
            <summary>
             将对象数据序列化
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.CreateConfigFileInfo">
            <summary>
             创建对象configfile
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.CreatesimpleTypeInfo">
            <summary>
             创建对象configfile
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.addValueOfStructItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             添加数据StructItem
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.addValueOfsimpleTypeItemWithout(System.String,System.String,System.String)">
            <summary>
             添加数据到simpleType，除enumeration部分
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.addValueOfEnumOfsimpleTypeItem(System.String,System.String,System.String)">
            <summary>
             添加数据到enumeration部分
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.updateValueOfsimpleTypeItem(System.String,System.String)">
            <summary>
             修改simpleTypeItem数据
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.updateValueOfStructItem(System.String,System.String)">
            <summary>
             修改StructItem中数据
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.ObjectToXml.updateValueOfParameterItem(System.String,System.String)">
            <summary>
             修改ParameterItem中数据
            </summary>
        </member>
        <member name="T:SmallManagerSpace.Resources.structitem">
            <summary>
            班级信息类
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.structitem.CID">
            <summary>
            CID
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.structitem.type">
            <summary>
            type
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.structitem.name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.structitem.preinput">
            <summary>
            preinput
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.structitem.note">
            <summary>
            note
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.structitem.parameterlist">
            <summary>
            学生列表
            </summary>
        </member>
        <member name="T:SmallManagerSpace.Resources.Student">
            <summary>
            学生信息类
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.Student.StuID">
            <summary>
            学生ID
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.Student.StuName">
            <summary>
            学生名称
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.Student.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:SmallManagerSpace.Resources.Student.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXml(System.Data.DataTable)">
            <summary>
            将DataTable对象转换成XML字符串
            </summary>
            <param name="dt">DataTable对象</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXml(System.Data.DataSet,System.Int32)">
            <summary>
            将DataSet对象中指定的Table转换成XML字符串
            </summary>
            <param name="ds">DataSet对象</param>
            <param name="tableIndex">DataSet对象中的Table索引</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXml(System.Data.DataSet)">
            <summary>
            将DataSet对象转换成XML字符串
            </summary>
            <param name="ds">DataSet对象</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXml(System.Data.DataView)">
            <summary>
            将DataView对象转换成XML字符串
            </summary>
            <param name="dv">DataView对象</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            将DataSet对象数据保存为XML文件
            </summary>
            <param name="dt">DataSet</param>
            <param name="xmlFilePath">XML文件路径</param>
            <returns>bool值</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXmlFile(System.Data.DataSet,System.Int32,System.String)">
            <summary>
            将DataSet对象中指定的Table转换成XML文件
            </summary>
            <param name="ds">DataSet对象</param>
            <param name="tableIndex">DataSet对象中的Table索引</param>
            <param name="xmlFilePath">xml文件路径</param>
            <returns>bool]值</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            将DataSet对象转换成XML文件
            </summary>
            <param name="ds">DataSet对象</param>
            <param name="xmlFilePath">xml文件路径</param>
            <returns>bool]值</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.DataToXml.CDataToXmlFile(System.Data.DataView,System.String)">
            <summary>
            将DataView对象转换成XML文件
            </summary>
            <param name="dv">DataView对象</param>
            <param name="xmlFilePath">xml文件路径</param>
            <returns>bool]值</returns>
        </member>
        <member name="T:SmallManagerSpace.Resources.XmlToData">
            <summary>
            XML形式的字符串、XML文江转换成DataSet、DataTable格式
            </summary>
        </member>
        <member name="M:SmallManagerSpace.Resources.XmlToData.CXmlToDataSet(System.String)">
            <summary>
            将Xml内容字符串转换成DataSet对象
            </summary>
            <param name="xmlStr">Xml内容字符串</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.XmlToData.CXmlToDatatTable(System.String,System.Int32)">
            <summary>
            将Xml字符串转换成DataTable对象
            </summary>
            <param name="xmlStr">Xml字符串</param>
            <param name="tableIndex">Table表索引</param>
            <returns>DataTable对象</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.XmlToData.CXmlToDatatTable(System.String)">
            <summary>
            将Xml字符串转换成DataTable对象
            </summary>
            <param name="xmlStr">Xml字符串</param>
            <returns>DataTable对象</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.XmlToData.CXmlFileToDataSet(System.String)">
            <summary>
            读取Xml文件信息,并转换成DataSet对象
            </summary>
            <remarks>
            DataSet ds = new DataSet();
            ds = CXmlFileToDataSet("/XML/upload.xml");
            </remarks>
            <param name="xmlFilePath">Xml文件地址</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.XmlToData.CXmlToDataTable(System.String,System.Int32)">
            <summary>
            读取Xml文件信息,并转换成DataTable对象
            </summary>
            <param name="xmlFilePath">xml文江路径</param>
            <param name="tableIndex">Table索引</param>
            <returns>DataTable对象</returns>
        </member>
        <member name="M:SmallManagerSpace.Resources.XmlToData.CXmlToDataTable(System.String)">
            <summary>
            读取Xml文件信息,并转换成DataTable对象
            </summary>
            <param name="xmlFilePath">xml文江路径</param>
            <returns>DataTable对象</returns>
        </member>
        <member name="F:MasterDetailSample.MessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MasterDetailSample.MessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MasterDetailSample.MessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MasterDetailSample.frmMain.GetTabPageName(System.Int32)">
            <summary>
            得到下表对应的页名
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MasterDetailSample.frmMain.AdvTreeSetting(DevComponents.AdvTree.AdvTree,System.String,System.Int32)">
            <summary>
            设置该页的名称，树的列，图片，字体等
            </summary>
            <param name="advTree"></param>
            <param name="BlockName"></param>
            <param name="PageIndex"></param>
        </member>
        <member name="M:MasterDetailSample.frmMain.SaveFileToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            遍历树中节点，生成.h文件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:My.Resources.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:My.Resources.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:My.Resources.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="M:TelnetNameSpace.TelnetClass.receive_thread(System.Object)">
             <summary>
            字符接收函数,并且过滤不显示的字符串
             </summary>
             <param name="o"></param>
        </member>
        <member name="T:Telnet.Terminal">
            <summary>
            Supports telnet connectivity.
            <p>
            Version 0.70	1st running version<br/>
            Version 0.71	Telnet class renamed to Terminal and close method improved<br/>
            Version 0.72	Added custom exceptions which may be used externally
            				Feedback of Mark H. considered, Wait() method added and WaitForChangedScreen() fixed<br/>
            Version 0.73	Offset problem in Virtual Screen fixed due to mail of Steve, thanks!<br/>
            Version 0.74	SendResponseFunctionKey(int) and fixed WaitFor[XYZ]-methods to better reflect
                            the timeout. Thanks Judah!<br/>
            </p>
            <list type="number">
            	<listheader>
            		<term>Features</term>
            		<description>Telnet functionality implemented</description>
            	</listheader>
            	<item>
            		<term>LOGOUT</term>
            		<description>Logout functionaliy implemented</description>
            	</item>
            	<item>
            		<term>NAWS</term>
            		<description>Sends a window size</description>
            	</item>
            	<item>
            		<term>TERMTYPE</term>
            		<description>Sends an "ANSI"-terminal type</description>
            	</item>
            	<item>
            		<term>Other telnet commands</term>
            		<description>Will be answered correctly with WILL / WONT</description>
            	</item>
            	<item>
            		<term>ESC-Sequences</term>
            		<description>Method dealing with ESC-sequences</description>
            	</item>
            </list>
            </summary>
            <remarks>
            The class is NOT thread safe for several connections,
            so each connection should have its own instance.
            <p>
            Credits for source code / technical information helping me:<br/>
            Tyler Kline		"clsScriptingTelnet"	<a href="http://www.c-sharpcorner.com/Code/2003/Jan/TelnetScripting.asp">Internet page</a> <br/>
            Igor Moochnick	"RemoteConsoleSolution"	<a href="http:http://www.gotdotnet.com/community/usersamples/Default.aspx?query=telnet">Internet page</a> <br/>
            </p>
            <p>
            <a href="http://www.networksorcery.com/enp/protocol/Terminal.htm">http://www.networksorcery.com/enp/protocol/Terminal.htm</a><br/>
            <a href="http://members.tripod.com/~ilkerf/cdoc/vt100ref.html">http://members.tripod.com/~ilkerf/cdoc/vt100ref.html</a><br/>
            <a href="http://www.klausbasan.de/misc/telnet/index.html">http://www.klausbasan.de/misc/telnet/index.html</a><br/>
            </p>
            </remarks>
        </member>
        <member name="F:Telnet.Terminal.VERSION">
            <summary>The version</summary>
        </member>
        <member name="P:Telnet.Terminal.EchoOn">
            <summary>
            Server echo on?
            </summary>
        </member>
        <member name="M:Telnet.Terminal.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="hostName">IP address, e.g. 192.168.0.20</param>
        </member>
        <member name="M:Telnet.Terminal.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="hostName">IP address, e.g. 192.168.0.20</param>
            <param name="port">Port, usually 23 for telnet</param>
            <param name="timeoutSeconds">Timeout for connections [s], both read and write</param>
        </member>
        <member name="M:Telnet.Terminal.Finalize">
            <summary>
            Destructor, calls Close()
            </summary>
        </member>
        <member name="M:Telnet.Terminal.Dispose">
            <summary>
            Dispose part, calls Close()
            </summary>
        </member>
        <member name="M:Telnet.Terminal.Connect">
            <summary>
            Connect to the telnet server
            </summary>
            <returns>true if connection was successful</returns>
        </member>
        <member name="M:Telnet.Terminal.Close">
            <summary>
            Closes external resources.
            Safe, can be called multiple times
            </summary>
        </member>
        <member name="M:Telnet.Terminal.IsOpenConnection">
            <summary>
            Is connection still open?
            </summary>
            <returns>true if connection is open</returns>
        </member>
        <member name="M:Telnet.Terminal.SendResponse(System.String,System.Boolean)">
            <summary>
            Send a response to the server
            </summary>
            <param name="response">response String</param>
            <param name="endLine">terminate with appropriate end-of-line chars</param>
            <returns>true if sending was OK</returns>
        </member>
        <member name="M:Telnet.Terminal.SendResponseFunctionKey(System.Int32)">
            <summary>
            Send a Funktion Key response to the server
            </summary>
            <param name="key">Key number 1-12</param>
            <returns>true if sending was OK</returns>
        </member>
        <member name="M:Telnet.Terminal.SendLogout">
            <summary>
            Send a synchronously telnet logout-response
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telnet.Terminal.SendLogout(System.Boolean)">
            <summary>
            Send a telnet logout-response
            </summary>
            <param name="synchronous">Send synchronously (true) or asynchronously (false)</param>
            <returns></returns>
        </member>
        <member name="M:Telnet.Terminal.WaitForString(System.String)">
            <summary>
            Wait for a particular string
            </summary>
            <param name="searchFor">string to be found</param>
            <returns>string found or null if not found</returns>
        </member>
        <member name="M:Telnet.Terminal.WaitForString(System.String,System.Boolean,System.Int32)">
            <summary>
            Wait for a particular string
            </summary>
            <param name="searchFor">string to be found</param>
            <param name="caseSensitive">case sensitive search</param>
            <param name="timeoutSeconds">timeout [s]</param>
            <returns>string found or null if not found</returns>
        </member>
        <member name="M:Telnet.Terminal.WaitForRegEx(System.String)">
            <summary>
            Wait for a particular regular expression
            </summary>
            <param name="regEx">string to be found</param>
            <returns>string found or null if not found</returns>
        </member>
        <member name="M:Telnet.Terminal.WaitForRegEx(System.String,System.Int32)">
            <summary>
            Wait for a particular regular expression
            </summary>
            <param name="regEx">string to be found</param>
            <param name="timeoutSeconds">timeout [s]</param>
            <returns>string found or null if not found</returns>
        </member>
        <member name="M:Telnet.Terminal.WaitForChangedScreen">
            <summary>
            Wait for changed screen. Read further documentation 
            on <code>WaitForChangedScreen(int)</code>.
            </summary>
            <returns>changed screen</returns>
        </member>
        <member name="M:Telnet.Terminal.WaitForChangedScreen(System.Int32)">
            <summary>
            Waits for changed screen: This method here resets
            the flag of the virtual screen and afterwards waits for
            changes.
            <p>
            This means the method detects changes after the call
            of the method, NOT prior.
            </p>
            <p>
            To reset the flag only use <code>WaitForChangedScreen(0)</code>.
            </p>
            </summary>
            <param name="timeoutSeconds">timeout [s]</param>
            <remarks>
            The property ChangedScreen of the virtual screen is
            reset after each call of Hardcopy(). It is also false directly
            after the initialization.
            </remarks>
            <returns>changed screen</returns>
        </member>
        <member name="M:Telnet.Terminal.Wait(System.Int32)">
            <summary>
            Wait (=Sleep) for n seconds
            </summary>
            <param name="seconds">seconds to sleep</param>
        </member>
        <member name="M:Telnet.Terminal.GetWaitTimeout(System.Int32)">
            <summary>
            Helper method: 
            Get the appropriate timeout, which is the bigger number of
            timeoutSeconds and this.timeoutReceive (TCP client timeout)
            </summary>
            <param name="timeoutSeconds">timeout in seconds</param>
        </member>
        <member name="M:Telnet.Terminal.GetWaitSleepTimeMs(System.Int32)">
            <summary>
            Helper method: 
            Get the appropriate sleep time based on timeout and TRIAL
            </summary>
            <param name="timeoutSeconds">timeout ins seconds</param>
        </member>
        <member name="M:Telnet.Terminal.TimeoutAbsoluteTime(System.Int32)">
            <summary>
            Helper method: 
            Get the end time, which is "NOW" + timeout
            </summary>
            <param name="timeoutSeconds">timeout int seconds</param>
        </member>
        <member name="M:Telnet.Terminal.ReadFromStream(System.IAsyncResult)">
            <summary>
            Callback function to read from the network stream
            </summary>
            <param name="asyncResult">Callback result</param>
        </member>
        <member name="M:Telnet.Terminal.WriteToStream(System.IAsyncResult)">
            <summary>
            Callback function to write to the network stream
            </summary>
            <param name="asyncResult">Callback result</param>
        </member>
        <member name="M:Telnet.Terminal.ParseAndRespondServerStream(System.Int32)">
            <summary>
            Go thru the data received and answer all technical server
            requests (TELNET negotiations).
            </summary>
            <param name="bytesRead">number of bytes read</param>
            <remarks>
            Thread saftey regarding the virtual screen needs to be considered
            </remarks>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.Byte[])">
            <summary>
            Does the sequence match the buffer starting at 
            current index?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">Bytes need to match</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Does the sequence match the buffer starting at 
            current index?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">Bytes need to match</param>
            <param name="ignoreIndex">Index of the byte which does not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Does the sequence match the buffer starting at 
            current index?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">Bytes need to match</param>
            <param name="ignoreIndex1">Index of the byte which does not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            <param name="ignoreIndex2">Index of the byte which does not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.Byte[],System.Int32[])">
            <summary>
            Does the sequence match the buffer starting at 
            current index?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">Bytes need to match</param>
            <param name="ignoreIndex">Index of bytes which do not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.String)">
            <summary>
            Does the sequence match the buffer?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">String needs to match</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.String,System.Int32)">
            <summary>
            Does the sequence match the buffer?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">String needs to match</param>
            <param name="ignoreIndex">Index of the byte which does not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchSequence(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Does the sequence match the buffer?
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="sequence">String needs to match</param>
            <param name="ignoreIndex1">Index of the byte which does not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            <param name="ignoreIndex2">Index of the byte which does not NEED to match, e.g. 2 means the 3rd byte (index 2) does not need to match</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchRegExp(System.Int32,System.String)">
            <summary>
            Match a regular Expression
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="regExp">Regular expression</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.MatchRegExp(System.Int32,System.Text.RegularExpressions.Regex)">
            <summary>
            Match a regular Expression
            </summary>
            <param name="bufferCounter">Current buffer counter</param>
            <param name="r">Regular expression object</param>
            <returns>Number of characters matching</returns>
        </member>
        <member name="M:Telnet.Terminal.TelnetWill(System.Byte,System.IO.MemoryStream)">
            <summary>
            Add a "WILL" response, e.g. "WILL negotiate about terminal size"
            </summary>
            <param name="willDoWhat"></param>
            <param name="response"></param>
        </member>
        <member name="M:Telnet.Terminal.TelnetWont(System.Byte,System.IO.MemoryStream)">
            <summary>
            Add a "WONT" response, e.g. "WONT negotiate about terminal size"
            </summary>
            <param name="wontDoWhat"></param>
            <param name="response"></param>
        </member>
        <member name="M:Telnet.Terminal.TelnetDo(System.Byte,System.IO.MemoryStream)">
            <summary>
            Add a "DO" response, e.g. "DO ..."
            </summary>
            <param name="doWhat"></param>
            <param name="response"></param>
        </member>
        <member name="M:Telnet.Terminal.TelnetDont(System.Byte,System.IO.MemoryStream)">
            <summary>
            Add a "DONT" response, e.g. "DONT ..."
            </summary>
            <param name="dontDoWhat"></param>
            <param name="response"></param>
        </member>
        <member name="M:Telnet.Terminal.TelnetSubIsANSI(System.IO.MemoryStream)">
            <summary>
            Add a telnet sub-negotiation for ANSI 
            terminal
            </summary>
            <param name="response">MemoryStream</param>
        </member>
        <member name="M:Telnet.Terminal.TelnetSubNAWS(System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Telnet sub send terminal size.
            </summary>
            <param name="w">window width</param>
            <param name="h">window height</param>
            <param name="response">MemoryStream</param>
        </member>
        <member name="M:Telnet.Terminal.CleanBuffer(System.Int32)">
            <summary>
            Cleans the buffer - not necessary since the values
            would just be overwritten - but useful for debugging!
            </summary>
            <param name="bytesRead">Bytes read and need cleaning</param>
        </member>
        <member name="M:Telnet.Terminal.MemoryStreamToByte(System.IO.MemoryStream)">
            <summary>
            The MemoryStream bas a bigger byte buffer than bytes
            were really written to it. This method fetches all bytes
            up the the position written to.
            </summary>
            <param name="ms">MemoryStream</param>
            <returns>really written bytes</returns>
        </member>
        <member name="T:Telnet.Terminal.TelnetException">
            <summary>
            Exception dealing with connectivity
            </summary>
        </member>
        <member name="M:Telnet.Terminal.TelnetException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception's message</param>
        </member>
        <member name="T:Telnet.Terminal.TerminalException">
            <summary>
            Exception dealing with parsing ...
            </summary>
        </member>
        <member name="M:Telnet.Terminal.TerminalException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception's message</param>
        </member>
    </members>
</doc>
